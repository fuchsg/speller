#!/usr/bin/env python3

import json
import os
import re
import sys

import argparse
formatter = lambda prog: argparse.HelpFormatter(prog, max_help_position=40)
parser = argparse.ArgumentParser(description="Spelling strings into words per character.", formatter_class=formatter)
parser.add_argument("string", nargs="?")
#parser.add_argument("-a", "--alphabet", default="nato", choices=os.listdir("./alphabets"), help="spelling alphabet to use")
parser.add_argument("-a", "--alphabet", default="nato", help="spelling alphabet to use")
parser.add_argument("-d", "--directory", default="./alphabets", help="directory to search for alphabets")
parser.add_argument("-l", "--list", action="store_true",  help="list all available alphabets")
args = parser.parse_args()

class Alphabet(str):

  def __init__(self, afile):
    self.dirAlphabets = os.path.dirname(afile)
    self.allAlphabets = os.listdir(self.dirAlphabets)
    self.name = os.path.basename(afile).rsplit(".", 1)[0]
    try:
      a = open(afile)
      self.alphabet = json.load(a)
    except:
      sys.exit(f"Alphabet {afile} not found.")

  def spell(self, string):
    spelled = ""
    passthrough = " \n\t"
    for i, c in enumerate(string):
      try:
        cword = f"{self.alphabet[c.lower()]}"
      except:
        if c in passthrough:
          cword = c
        else:
          #cword = colored(c, "red") if mode == "colored" else f">{c}<"
          cword = f">{c}<"

      if (i > 0  and c not in passthrough and string[i-1] not in passthrough):
        cword = "-" + cword if self.name != "morse" else " " + cword

      spelled += cword.upper() if c.isupper() else cword

    return spelled.rstrip("\n")

  def list(self):
    for afile in self.allAlphabets:
      with open(f"{self.dirAlphabets}/{afile}") as f: print("%-10s %s" % (afile.rsplit(".", 1)[0], json.load(f)["standard"]))

alphabet = Alphabet(args.directory + "/" + args.alphabet + ".json")

if args.list:
  alphabet.list()
else:
  if args.string:
    print(alphabet.spell(args.string))
  else:
    for line in sys.stdin:
      print(alphabet.spell(line))

exit()
#try:
#  from termcolor import colored
#  mode = "colored"
#except:
#  mode = "uncolored"

mode = "colored"

class Colorize(str):

  def __init__(self, string):
    self.string = string

  def redfg(self):
    self.string = "\033[91m" + self.string + "\033[0m"
    self.string = "\033[38;2;255;0;0m" + self.string + "\033[0m"
    return(self)

#  def cyanfg(self):
#    self.string = "\033[12m" + self.string + "\033[0m"
#    return(self)

  def uncolor(self):
    regexp = re.compile(r'\x1b[^m]*m')
    self.string = regexp.sub('', self.string)
    return(self)

spell = ""
for i, c in enumerate([*args.string]):
  try:
    cword = f"{alphabet[c.lower()]}"
  except:
    if c.ispace():
      cword = c;
    else:
      #cword = colored(c, "red") if mode == "colored" else f">{c}<"
      cword = Colorize(c).redfg().string if mode == "colored" else f">{c}<"

  if (i > 0  and c != " " and args.string[i-1] != " "):
    cword = "-" + cword

  spell += cword.upper() if c.isupper() else cword

print(spell)

